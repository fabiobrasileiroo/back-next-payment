// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Payment {
  id                 Int      @id @default(autoincrement())
  transaction_amount Float
  status             String
  payer_email        String
  payment_method     String
  payment_id         BigInt   @unique
  createdAt          DateTime @default(now())
  product            Product? @relation(fields: [productId], references: [id])
  productId          Int?
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Float
  description String?
  imageUrl    String?
  companyId   Int
  company     Company     @relation(fields: [companyId], references: [id])
  quantity    Int
  categoryId  Int?
  category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  payments    Payment[] // Added relation to Payment
}

model Company {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  document String    @unique
  users    User[]
  units    Unit[]
  products Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int
  product       Product       @relation(fields: [productId], references: [id])
  productId     Int
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  paymentStatus PaymentStatus @default(PROCESSING)
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  name                 String
  password             String
  role                 UserRole  @default(PENDING)
  proposal             Proposal? @relation(name: "ProposalToUser")
  company              Company?  @relation(fields: [companyId], references: [id])
  companyId            Int?
  orders               Order[]
  imageUrl             String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentStatus {
  PAID
  FAILED
  PROCESSING
}

model Unit {
  id        Int        @id @default(autoincrement())
  name      String
  company   Company    @relation(fields: [companyId], references: [id])
  companyId Int
  pixKey    String?
  Proposal  Proposal[]
}

model Proposal {
  id              Int            @id @default(autoincrement())
  companyName     String
  companyDocument String
  user            User           @relation(fields: [userId], references: [id], name: "ProposalToUser")
  userId          Int            @unique
  status          ProposalStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  proposalValue   Float
  unitId          Int?
  unit            Unit?          @relation(fields: [unitId], references: [id])
}

enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  PENDING
  USER
  ADMIN
}
