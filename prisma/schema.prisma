// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Payment {
  id               Int      @id @default(autoincrement())
  transaction_amount Float
  status           String
  payer_email      String
  payment_method   String
  payment_id       String @unique
  createdAt        DateTime @default(now())
}
model Order {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  totalAmount Float
  status      OrderStatus    @default(PENDING) // Status do pedido como um todo
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  items       OrderItem[]    // Relação com os itens do pedido
}

model OrderItem {
  id           Int          @id @default(autoincrement())
  order        Order        @relation(fields: [orderId], references: [id])
  orderId      Int
  product      Product      @relation(fields: [productId], references: [id])
  productId    Int
  quantity     Int          // Quantidade do produto no pedido
  unitPrice    Float        // Preço unitário do produto no momento do pedido
  totalPrice   Float        // Preço total para essa quantidade do produto
  paymentStatus PaymentStatus @default(PROCESSING) // Status de pagamento do item
}


model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  password     String
  role         UserRole @default(PENDING)
  proposal     Proposal? @relation(name: "ProposalToUser")
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  orders       Order[]  // Relação inversa com os pedidos
  imageUrl             String?   // Novo campo para armazenar a URL da imagem do usuário

  // Novos campos para redefinição de senha
  passwordResetToken   String?
  passwordResetExpires DateTime?
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  price       Float
  description String?
  imageUrl    String?   // Campo opcional para o link da imagem
  companyId   Int
  company     Company   @relation(fields: [companyId], references: [id])
  quantity    Int
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[] // Relação inversa com os itens do pedido
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentStatus {
  PAID
  FAILED
  PROCESSING
}


model Company {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  document String   @unique
  users    User[]   // Relação com os usuários
  units    Unit[]
  products Product[]
}

model Unit {
  id          Int      @id @default(autoincrement())
  name        String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   Int
  pixKey      String?  // Chave PIX opcional da unidade
  Proposal    Proposal[]
}


model Proposal {
  id              Int       @id @default(autoincrement())
  companyName     String
  companyDocument String
  user            User      @relation(fields: [userId], references: [id], name: "ProposalToUser")
  userId          Int       @unique
  status          ProposalStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  proposalValue   Float
  unitId          Int?      // Unidade da empresa relacionada a esta proposta
  unit            Unit?     @relation(fields: [unitId], references: [id])
}


enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  PENDING  // Usuários que ainda não foram aprovados
  USER
  ADMIN
}
